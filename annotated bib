Maloney, John, et al. Programming by Choice: Urban Youth Learning Programming with Scratch . web.media.mit.edu/~mres/papers/sigcse-08.pdf. -Focuses on CS/programming education outside of the classroom since this is at a local center where learning opportunity is accessible but learning happens from youth's motivation
-9% of time of youth is spent in an formal educational institution and then that time is divided among many subjects
-Scratch is drag nad drop instead of typing code
-Scratch focuses on animations and media manipulation
-Scratch includes a lot of core programming concepts
-Scratch has sprite variables and global variables
-Clubhouse hosted 3-4 hour ScratchAThons
-Scratch heavily and successfully boys and girls of color
-most associated school subject to Scratch was Arts with 20 then reading with 10
-Students were able to express their vcreativity
-A lot of kids didnt know what computer programming was after using scratch
-Kids learned CS concepts on their own with the occasional mentors (w/o programming experience) that are available
-Kelleher, C. &amp; Pausch, R. (2005). have researxch on lowering barriersa by simplifying ideas an dimproving motivation

Thomas, Stewart J, et al. “Recruiting VR Troopers: Bringing Introductory Programming Projects to Life in Virtual Reality.” Purdue e-Pubs, Purdue University, docs.lib.purdue.edu/cgi/viewcontent.cgi?article=1004&amp;context=aseeil-insectionconference. *Students made their own 3D environment and surveys were taken on their levels of interest in CS
-intro CS classes focus on easy, isolated, small problems
-real world CS operates in bigger framework
-electrical engineers aren't given a good enough understanding of CS
-consumer single user VR devices v projection based expensive VR devices
-Creating a 3D scene gives students a challenge and an opportunity to be creative
-students engage with a complex library while workung with VR
-engaging with VR greatly increased students'interest in programming

Bornat, Richard, et al. “Mental Models, Consistency and Programming Aptitude.” Acm, Proc. Tenth Australasian Computing Education Conference, 2008, dl.acm.org/doi/pdf/10.5555/1379249.1379253?download=true. -introductory programming failure rates have increased despite research
-programming is not widely taught before college so people dont know if they have the capacity for programming beforehand
-distribution of grades in CS1 is very bimodal
-if one knows how their program works they'll be more successful
-no evidence that simpler langs and IDEs have improved novice success rates
-common to build programs top down but experts build them bottom up
-mental model is an understanding of something in which certain things are true
-understanding something requires a mental model to have been developed
-Two important programming concepts that are hard for beginners are assignment and sequence &amp; recursion and iteration
-tests students' mental; mmodels of assignment and sequence to 30 students in week 0 with no previous programming knowledge but they do have algebraic knowledge
-27 students (44%) were consistent in which mental model they used but in the groupo some used wrong mental models
-didnt collect background on subjects nor interviewed them afterwardes to gather thought process
-17 /90 swtudents ghad dropped course by week 3 which makes data collection lesss accurtate
-more complicated problems required more attempted mental models brfore a correct model is formed
-examinations occur in UK and Australia' this is a worldwide problem
-failure of students to form a mental model of simple assignment shows a lack of ability to generalize concepts
-not necessarily a large correlation between consistent mental models and passing the course

Hosseini, Roya, et al. “Animated Examples as Practice Content in a Java Programming Course.” Animated Examples as Practice Content in a Java Programming Course | Proceedings of the 47th ACM Technical Symposium on Computing Science Education, ACM, 1 Feb. 2016, dl.acm.org/doi/pdf/10.1145/2839509.2844639. -studies effectiveness between students using annotated code v code visualization
-annotated code is a code snippet wjhere each line is explained
-program visualization is interactive software that ghelps students see how an executing program works graphically
-students are more successful when they practice more but are typically unmotivated to do extra practice
-mandatory practice results in an disengaged clicking through
-want optional and helpful tools that students will want to use
-students using Jeliot 3 for visualization of their own Java code has had a positive correlation on their results in class
-Jsvee shows intermediate steps of each line of code
-more annotated example viewed than annotated but there were many more annotated examples to view, but students spent more time angaging with the animated examples
-can skip lines in annotated example but animation doesnt allow for random acceess of lines
-there is a negative correlation between how many annotated example ere viewd an d the success rate of wehich a studnet answered the problems
-20% of times after failure swtudents accessed annotated code, but 4% of time accessede animated
-data analysis concludes that the animated examples resulted in better learning for the students
-the better the student did on the pretest the better they did onb the posttest
-positive correlation between amount of work and performan ce for animated examples
-each annotated example used decreased post test score while each aniomated example used increased the post test score
-large positive correlation between course grade and num of distinct animated examples a student used while the opposite is again true for annotated
